{% extends 'base.html.twig' %}

{% block title %}{{ page_title }} - Administration{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .translation-stats {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .progress {
            height: 20px;
            margin-bottom: 10px;
        }
        
        .language-card {
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            transition: box-shadow 0.2s;
        }
        
        .language-card:hover {
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .completion-badge {
            font-size: 0.8rem;
            padding: 4px 8px;
        }
        
        .status-complete { background-color: #28a745; }
        .status-good { background-color: #17a2b8; }
        .status-average { background-color: #ffc107; color: #212529; }
        .status-poor { background-color: #fd7e14; }
        .status-empty { background-color: #6c757d; }
        
        .domain-selector {
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .btn-create-domain {
            background: linear-gradient(45deg, #007bff, #0056b3);
            border: none;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .btn-create-domain:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,123,255,0.3);
        }
        
        .sync-button {
            background: linear-gradient(45deg, #28a745, #1e7e34);
            border: none;
            color: white;
            padding: 8px 16px;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .sync-button:hover {
            transform: scale(1.05);
            box-shadow: 0 2px 4px rgba(40,167,69,0.3);
        }
    </style>
{% endblock %}

{% block body %}
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">
                <i class="fas fa-language"></i> {{ page_title }}
            </h1>
        </div>
    </div>

    <!-- Sélecteur de domaine et actions globales -->
    <div class="row">
        <div class="col-md-8">
            <div class="domain-selector">
                <h3>Domaines de traduction</h3>
                <div class="d-flex align-items-center mb-3">
                    <select id="domainSelector" class="form-select me-3">
                        {% for domain in domains %}
                            <option value="{{ domain }}">{{ domain|title }}</option>
                        {% endfor %}
                    </select>
                    <button class="btn sync-button" onclick="synchronizeDomain()">
                        <i class="fas fa-sync-alt"></i> Synchroniser
                    </button>
                </div>
                <div class="d-flex">
                    <input type="text" id="newDomainName" class="form-control me-2" 
                           placeholder="Nom du nouveau domaine (ex: admin, frontend)">
                    <button class="btn btn-create-domain" onclick="createDomain()">
                        <i class="fas fa-plus"></i> Créer domaine
                    </button>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="translation-stats">
                <h4>Statistiques globales</h4>
                <div id="globalStats">
                    <p><strong>{{ languages|length }}</strong> langues actives</p>
                    <p><strong>{{ domains|length }}</strong> domaines</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Grille des langues et statistiques -->
    <div class="row">
        <div class="col-12">
            <h3>Progression par langue</h3>
            <div id="languageGrid">
                {% for stat in stats %}
                    {% set language = stat.language %}
                    {% set percentage = stat.completion_percentage %}
                    {% set status = stat.status %}
                    
                    <div class="language-card">
                        <div class="row align-items-center">
                            <div class="col-md-2">
                                <h5 class="mb-1">
                                    {{ language.name }}
                                    {% if language.isDefault %}
                                        <span class="badge bg-primary ms-1">Défaut</span>
                                    {% endif %}
                                </h5>
                                <small class="text-muted">{{ language.code|upper }}</small>
                            </div>
                            
                            <div class="col-md-4">
                                <div class="progress">
                                    <div class="progress-bar bg-{{ status == 'complete' ? 'success' : (status == 'good' ? 'info' : (status == 'average' ? 'warning' : 'danger')) }}" 
                                         role="progressbar" 
                                         style="width: {{ percentage }}%"
                                         aria-valuenow="{{ percentage }}" 
                                         aria-valuemin="0" 
                                         aria-valuemax="100">
                                        {{ percentage }}%
                                    </div>
                                </div>
                                <small class="text-muted">
                                    {{ stat.translated_keys }}/{{ stat.total_keys }} traductions
                                    {% if stat.missing_keys > 0 %}
                                        ({{ stat.missing_keys }} manquantes)
                                    {% endif %}
                                </small>
                            </div>
                            
                            <div class="col-md-2">
                                <span class="badge completion-badge status-{{ status }}">
                                    {{ status|title }}
                                </span>
                            </div>
                            
                            <div class="col-md-4 text-end">
                                <div class="btn-group">
                                    <a href="{{ path('admin_translation_edit', {domain: domains[0], locale: language.code}) }}" 
                                       class="btn btn-outline-primary btn-sm">
                                        <i class="fas fa-edit"></i> Éditer
                                    </a>
                                    <a href="{{ path('admin_translation_export', {domain: domains[0], locale: language.code}) }}" 
                                       class="btn btn-outline-success btn-sm">
                                        <i class="fas fa-download"></i> Export
                                    </a>
                                    <button class="btn btn-outline-info btn-sm" 
                                            onclick="showImportModal('{{ domains[0] }}', '{{ language.code }}')">
                                        <i class="fas fa-upload"></i> Import
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                {% endfor %}
            </div>
        </div>
    </div>
</div>

<!-- Modal d'import -->
<div class="modal fade" id="importModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Importer des traductions</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="importForm" enctype="multipart/form-data">
                    <input type="hidden" id="importDomain" name="domain">
                    <input type="hidden" id="importLocale" name="locale">
                    <div class="mb-3">
                        <label for="translationFile" class="form-label">Fichier YAML</label>
                        <input type="file" class="form-control" id="translationFile" 
                               name="translation_file" accept=".yaml,.yml" required>
                        <div class="form-text">Seuls les fichiers YAML sont acceptés</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-primary" onclick="importTranslations()">Importer</button>
            </div>
        </div>
    </div>
</div>

<!-- Notifications -->
<div id="notifications" style="position: fixed; top: 20px; right: 20px; z-index: 9999;"></div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        let currentDomain = '{{ domains[0] ?? 'messages' }}';
        
        // Changer de domaine
        document.getElementById('domainSelector').addEventListener('change', function() {
            currentDomain = this.value;
            updateLanguageGrid();
        });
        
        // Synchroniser un domaine
        function synchronizeDomain() {
            const btn = event.target.closest('button');
            const originalText = btn.innerHTML;
            
            btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Synchronisation...';
            btn.disabled = true;
            
            fetch(`{{ path('admin_translation_synchronize', {domain: '__DOMAIN__'}) }}`.replace('__DOMAIN__', currentDomain), {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification(data.message, 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showNotification(data.message, 'error');
                }
            })
            .catch(error => {
                showNotification('Erreur de synchronisation', 'error');
            })
            .finally(() => {
                btn.innerHTML = originalText;
                btn.disabled = false;
            });
        }
        
        // Créer un nouveau domaine
        function createDomain() {
            const domainName = document.getElementById('newDomainName').value.trim();
            
            if (!domainName) {
                showNotification('Veuillez saisir un nom de domaine', 'warning');
                return;
            }
            
            fetch('{{ path('admin_translation_create_domain') }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ domain: domainName })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification(data.message, 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showNotification(data.message, 'error');
                }
            })
            .catch(error => {
                showNotification('Erreur lors de la création du domaine', 'error');
            });
        }
        
        // Afficher le modal d'import
        function showImportModal(domain, locale) {
            document.getElementById('importDomain').value = domain;
            document.getElementById('importLocale').value = locale;
            new bootstrap.Modal(document.getElementById('importModal')).show();
        }
        
        // Importer des traductions
        function importTranslations() {
            const formData = new FormData(document.getElementById('importForm'));
            const domain = document.getElementById('importDomain').value;
            const locale = document.getElementById('importLocale').value;
            
            fetch(`{{ path('admin_translation_import', {domain: '__DOMAIN__', locale: '__LOCALE__'}) }}`
                .replace('__DOMAIN__', domain)
                .replace('__LOCALE__', locale), {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification(data.message, 'success');
                    bootstrap.Modal.getInstance(document.getElementById('importModal')).hide();
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showNotification(data.message, 'error');
                }
            })
            .catch(error => {
                showNotification('Erreur lors de l\'import', 'error');
            });
        }
        
        // Mettre à jour la grille des langues
        function updateLanguageGrid() {
            fetch(`{{ path('admin_translation_stats', {domain: '__DOMAIN__'}) }}`.replace('__DOMAIN__', currentDomain))
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Mettre à jour les liens d'édition
                    document.querySelectorAll('a[href*="admin_translation_edit"]').forEach(link => {
                        const url = new URL(link.href);
                        url.pathname = url.pathname.replace(/\/edit\/[^\/]+\//, `/edit/${currentDomain}/`);
                        link.href = url.toString();
                    });
                    
                    // Mettre à jour les statistiques si nécessaire
                    // TODO: Mettre à jour dynamiquement les statistiques dans le DOM
                }
            });
        }
        
        // Système de notifications
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show`;
            notification.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.getElementById('notifications').appendChild(notification);
            
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 5000);
        }
    </script>
{% endblock %}
